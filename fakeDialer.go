// Code generated by counterfeiter. DO NOT EDIT.
package iwebsocket

import (
	"context"
	"net/http"
	"sync"

	"github.com/gorilla/websocket"
)

type FakeDialer struct {
	DialStub        func(string, http.Header) (*websocket.Conn, *http.Response, error)
	dialMutex       sync.RWMutex
	dialArgsForCall []struct {
		arg1 string
		arg2 http.Header
	}
	dialReturns struct {
		result1 *websocket.Conn
		result2 *http.Response
		result3 error
	}
	dialReturnsOnCall map[int]struct {
		result1 *websocket.Conn
		result2 *http.Response
		result3 error
	}
	DialContextStub        func(context.Context, string, http.Header) (*websocket.Conn, *http.Response, error)
	dialContextMutex       sync.RWMutex
	dialContextArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 http.Header
	}
	dialContextReturns struct {
		result1 *websocket.Conn
		result2 *http.Response
		result3 error
	}
	dialContextReturnsOnCall map[int]struct {
		result1 *websocket.Conn
		result2 *http.Response
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDialer) Dial(arg1 string, arg2 http.Header) (*websocket.Conn, *http.Response, error) {
	fake.dialMutex.Lock()
	ret, specificReturn := fake.dialReturnsOnCall[len(fake.dialArgsForCall)]
	fake.dialArgsForCall = append(fake.dialArgsForCall, struct {
		arg1 string
		arg2 http.Header
	}{arg1, arg2})
	fake.recordInvocation("Dial", []interface{}{arg1, arg2})
	fake.dialMutex.Unlock()
	if fake.DialStub != nil {
		return fake.DialStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.dialReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeDialer) DialCallCount() int {
	fake.dialMutex.RLock()
	defer fake.dialMutex.RUnlock()
	return len(fake.dialArgsForCall)
}

func (fake *FakeDialer) DialCalls(stub func(string, http.Header) (*websocket.Conn, *http.Response, error)) {
	fake.dialMutex.Lock()
	defer fake.dialMutex.Unlock()
	fake.DialStub = stub
}

func (fake *FakeDialer) DialArgsForCall(i int) (string, http.Header) {
	fake.dialMutex.RLock()
	defer fake.dialMutex.RUnlock()
	argsForCall := fake.dialArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDialer) DialReturns(result1 *websocket.Conn, result2 *http.Response, result3 error) {
	fake.dialMutex.Lock()
	defer fake.dialMutex.Unlock()
	fake.DialStub = nil
	fake.dialReturns = struct {
		result1 *websocket.Conn
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeDialer) DialReturnsOnCall(i int, result1 *websocket.Conn, result2 *http.Response, result3 error) {
	fake.dialMutex.Lock()
	defer fake.dialMutex.Unlock()
	fake.DialStub = nil
	if fake.dialReturnsOnCall == nil {
		fake.dialReturnsOnCall = make(map[int]struct {
			result1 *websocket.Conn
			result2 *http.Response
			result3 error
		})
	}
	fake.dialReturnsOnCall[i] = struct {
		result1 *websocket.Conn
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeDialer) DialContext(arg1 context.Context, arg2 string, arg3 http.Header) (*websocket.Conn, *http.Response, error) {
	fake.dialContextMutex.Lock()
	ret, specificReturn := fake.dialContextReturnsOnCall[len(fake.dialContextArgsForCall)]
	fake.dialContextArgsForCall = append(fake.dialContextArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 http.Header
	}{arg1, arg2, arg3})
	fake.recordInvocation("DialContext", []interface{}{arg1, arg2, arg3})
	fake.dialContextMutex.Unlock()
	if fake.DialContextStub != nil {
		return fake.DialContextStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.dialContextReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeDialer) DialContextCallCount() int {
	fake.dialContextMutex.RLock()
	defer fake.dialContextMutex.RUnlock()
	return len(fake.dialContextArgsForCall)
}

func (fake *FakeDialer) DialContextCalls(stub func(context.Context, string, http.Header) (*websocket.Conn, *http.Response, error)) {
	fake.dialContextMutex.Lock()
	defer fake.dialContextMutex.Unlock()
	fake.DialContextStub = stub
}

func (fake *FakeDialer) DialContextArgsForCall(i int) (context.Context, string, http.Header) {
	fake.dialContextMutex.RLock()
	defer fake.dialContextMutex.RUnlock()
	argsForCall := fake.dialContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeDialer) DialContextReturns(result1 *websocket.Conn, result2 *http.Response, result3 error) {
	fake.dialContextMutex.Lock()
	defer fake.dialContextMutex.Unlock()
	fake.DialContextStub = nil
	fake.dialContextReturns = struct {
		result1 *websocket.Conn
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeDialer) DialContextReturnsOnCall(i int, result1 *websocket.Conn, result2 *http.Response, result3 error) {
	fake.dialContextMutex.Lock()
	defer fake.dialContextMutex.Unlock()
	fake.DialContextStub = nil
	if fake.dialContextReturnsOnCall == nil {
		fake.dialContextReturnsOnCall = make(map[int]struct {
			result1 *websocket.Conn
			result2 *http.Response
			result3 error
		})
	}
	fake.dialContextReturnsOnCall[i] = struct {
		result1 *websocket.Conn
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeDialer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.dialMutex.RLock()
	defer fake.dialMutex.RUnlock()
	fake.dialContextMutex.RLock()
	defer fake.dialContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDialer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ Dialer = new(FakeDialer)
