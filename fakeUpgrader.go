// Code generated by counterfeiter. DO NOT EDIT.
package iwebsocket

import (
	"net/http"
	"sync"

	"github.com/gorilla/websocket"
)

type FakeUpgrader struct {
	UpgradeStub        func(http.ResponseWriter, *http.Request, http.Header) (*websocket.Conn, error)
	upgradeMutex       sync.RWMutex
	upgradeArgsForCall []struct {
		arg1 http.ResponseWriter
		arg2 *http.Request
		arg3 http.Header
	}
	upgradeReturns struct {
		result1 *websocket.Conn
		result2 error
	}
	upgradeReturnsOnCall map[int]struct {
		result1 *websocket.Conn
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUpgrader) Upgrade(arg1 http.ResponseWriter, arg2 *http.Request, arg3 http.Header) (*websocket.Conn, error) {
	fake.upgradeMutex.Lock()
	ret, specificReturn := fake.upgradeReturnsOnCall[len(fake.upgradeArgsForCall)]
	fake.upgradeArgsForCall = append(fake.upgradeArgsForCall, struct {
		arg1 http.ResponseWriter
		arg2 *http.Request
		arg3 http.Header
	}{arg1, arg2, arg3})
	fake.recordInvocation("Upgrade", []interface{}{arg1, arg2, arg3})
	fake.upgradeMutex.Unlock()
	if fake.UpgradeStub != nil {
		return fake.UpgradeStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.upgradeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUpgrader) UpgradeCallCount() int {
	fake.upgradeMutex.RLock()
	defer fake.upgradeMutex.RUnlock()
	return len(fake.upgradeArgsForCall)
}

func (fake *FakeUpgrader) UpgradeCalls(stub func(http.ResponseWriter, *http.Request, http.Header) (*websocket.Conn, error)) {
	fake.upgradeMutex.Lock()
	defer fake.upgradeMutex.Unlock()
	fake.UpgradeStub = stub
}

func (fake *FakeUpgrader) UpgradeArgsForCall(i int) (http.ResponseWriter, *http.Request, http.Header) {
	fake.upgradeMutex.RLock()
	defer fake.upgradeMutex.RUnlock()
	argsForCall := fake.upgradeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeUpgrader) UpgradeReturns(result1 *websocket.Conn, result2 error) {
	fake.upgradeMutex.Lock()
	defer fake.upgradeMutex.Unlock()
	fake.UpgradeStub = nil
	fake.upgradeReturns = struct {
		result1 *websocket.Conn
		result2 error
	}{result1, result2}
}

func (fake *FakeUpgrader) UpgradeReturnsOnCall(i int, result1 *websocket.Conn, result2 error) {
	fake.upgradeMutex.Lock()
	defer fake.upgradeMutex.Unlock()
	fake.UpgradeStub = nil
	if fake.upgradeReturnsOnCall == nil {
		fake.upgradeReturnsOnCall = make(map[int]struct {
			result1 *websocket.Conn
			result2 error
		})
	}
	fake.upgradeReturnsOnCall[i] = struct {
		result1 *websocket.Conn
		result2 error
	}{result1, result2}
}

func (fake *FakeUpgrader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.upgradeMutex.RLock()
	defer fake.upgradeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUpgrader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ Upgrader = new(FakeUpgrader)
